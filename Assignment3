Question 1 : 1) Read a csv file from gcp cloud storage and view the contents using python.
==============
-Create a bucket in storage.
-In google SDK, 
a. gcloud beta auth application-default login
b. gcloud beta interactive(To go to interactive shell)
Or activate google cloudshell and give ipython
This code can be used to import csv
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()
service = discovery.build('storage', 'v1', credentials=credentials)

filename = 'C:\\MyFiles\\sample.csv'
bucket = 'my_bucket'

body = {'name': 'dest_file_name.csv'}
req = service.objects().insert(bucket=bucket, body=body, media_body=filename)
resp = req.execute()

Or

In bucket page, use UI to import CSV.
URL of my data: https://storage.cloud.google.com/dph_assignment_3/movie_data.csv

Reading CSV using Python
------------------------
-Create a service account for the bucket and download the JSON.


import sys
import csv
import datetime
import pandas as pd
import gcsfs

from google.cloud import storage

storage_client = storage.Client()
bucket = storage_client.get_bucket('dph_assignment_3')
blob = bucket.blob('movie_data.csv')
bt = blob.download_as_string()

from io import BytesIO
s = BytesIO(bt)
df=pd.read_csv(s)
print(df)

Output is saved as Question1.png

=================================================================================================

Question 2

Code:
--------

import pandas as pd
df=pd.read_parquet("gs://dph_assignment_3/userdata5.parquet")
print(df)

Output is saved as Question2.png

===================================================================================================

Question 3

Query 1:
List the number of movies in each year

grp=df.groupby('title_year').size()

Output

title_year
1916.0      1
1920.0      1
1925.0      1
1927.0      1
1929.0      2
1930.0      1
1932.0      1
1933.0      2
1934.0      1
1935.0      1
1936.0      2
1937.0      2
1938.0      2
1939.0      3
1940.0      5
1941.0      1
1942.0      2
1943.0      1
1944.0      1
1945.0      4
1946.0      3
1947.0      3
1948.0      3
1949.0      2
1950.0      1
1951.0      3
1952.0      4
1953.0      4
1954.0      5
1955.0      2
         ... 
1987.0     32
1988.0     31
1989.0     33
1990.0     30
1991.0     31
1992.0     34
1993.0     48
1994.0     54
1995.0     70
1996.0     99
1997.0    118
1998.0    134
1999.0    168
2000.0    171
2001.0    188
2002.0    209
2003.0    169
2004.0    214
2005.0    221
2006.0    239
2007.0    204
2008.0    225
2009.0    260
2010.0    230
2011.0    225
2012.0    221
2013.0    237
2014.0    252
2015.0    226
2016.0    106

Query 2

Group the movies by imdb_score

Query: grp=df.groupby('imdb_score').size()

imdb_score
1.6      1
1.7      1
1.9      3
2.0      2
2.1      3
2.2      3
2.3      3
2.4      2
2.5      2
2.6      2
2.7      6
2.8      9
2.9      4
3.0      5
3.1      8
3.2      7
3.3     17
3.4     12
3.5     15
3.6     14
3.7      9
3.8     14
3.9     14
4.0     18
4.1     26
4.2     20
4.3     31
4.4     25
4.5     33
4.6     38
      ... 
6.5    186
6.6    201
6.7    223
6.8    181
6.9    174
7.0    184
7.1    181
7.2    195
7.3    184
7.4    147
7.5    140
7.6    124
7.7    114
7.8    106
7.9     75
8.0     75
8.1     69
8.2     42
8.3     40
8.4     29
8.5     24
8.6     15
8.7     13
8.8      7
8.9      5
9.0      3
9.1      3
9.2      1
9.3      1
9.5      1
Length: 78, dtype: int64
